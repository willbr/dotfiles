filetype off

let VundleFound = 1
let VundleReadme = expand('~/.vim/bundle/vundle/README.md')
if !filereadable(VundleReadme)
    echo 'Installing Vundle'
    echo ''
    silent !mkdir -p ~/.vim/bundle
    silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let VundleFound = 0
endif

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle 'gmarik/vundle'

Bundle 'kien/ctrlp.vim'
Bundle 'kien/rainbow_parentheses.vim'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Bundle 'mileszs/ack.vim'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-fugitive'
Bundle 'altercation/vim-colors-solarized'
Bundle 'tomasr/molokai'
Bundle 'pangloss/vim-javascript'
Bundle 'kchmck/vim-coffee-script'
Bundle 'Lokaltog/vim-powerline'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'majutsushi/tagbar'
Bundle 'ervandew/supertab'
Bundle 'Shougo/neocomplcache'

if !VundleFound
    echo 'Installing Bundles...'
    echo ''
    :BundleInstall
endif

syntax on
filetype plugin indent on

set nocompatible
set noswapfile
set shortmess=atI

set backup
set backupdir=~/.tmp,~/,.
set directory=~/.tmp,~/,.

set history=500

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
    set mouse=a
endif

set tags=./tags;,~/.vimtags

set clipboard=unnamed

cmap w!! w !sudo tee % >/dev/null

set spelllang=en_gb

" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------

set autoindent             " automatic indent new lines
set smartindent            " be smart about it
inoremap # X<BS>#
set nowrap                 " do not wrap lines
set softtabstop=4
set shiftwidth=4
set tabstop=4
set expandtab              " expand tabs to spaces
set nosmarttab             " fuck tabs
set formatoptions+=n       " support for numbered/bullet lists
set textwidth=72           " wrap at 80 chars by default
set colorcolumn=72
set virtualedit=block      " allow virtual edit in visual block ..

" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------

" lead with ,
let mapleader = ","

" exit to normal mode with 'jj'
inoremap jj <ESC>
inoremap jk <ESC>

" set undo point at C-U
inoremap <C-U> <C-G>u<C-U>

nnoremap 0 ^
nnoremap ^ 0
nnoremap ; :

nnoremap <leader>Q :qall!<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>x :x<CR>

nnoremap <leader>m :make<CR>

" reflow paragraph with Q in normal and visual mode
nnoremap Q gqap
vnoremap Q gq

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" readline mappings
inoremap <C-a> <Home>
inoremap <C-e> <End>
inoremap <C-f> <Right>
inoremap <C-b> <Left>
inoremap <C-n> <Down>
inoremap <C-p> <Up>

" key tweaks
inoremap <nul> _
inoremap <C-Space> _

inoremap <C-h> [
inoremap <C-j> (
imap <C-k> <SPACE><BS>)
imap <C-l> <SPACE><BS>]
inoremap <C-o> {

nnoremap <silent> <leader>of :FSHere<CR>
nnoremap <silent> <leader>a :Ack<Space>
nnoremap <silent> <leader>gd :Gdiff<CR>

" ----------------------------------------------------------------------------
" Window
" ----------------------------------------------------------------------------

nnoremap <C-h> <C-W>h
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set ruler                  " show the cursor position all the time
set noshowcmd              " don't display incomplete commands
set nolazyredraw           " turn off lazy redraw
set number                 " line numbers
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
set ch=2                   " command line height
set backspace=2            " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling
set scrolloff=3

if has("autocmd")
    " Put these in an autocmd group, so that we can delete them easily.
    augroup vimrcEx
        au!
        " When editing a file, always jump to the last known cursor position.
        " Don't do it when the position is invalid or when inside an event handler
        " (happens when dropping a file on gvim).
        " Also don't do it when the mark is in the first line, that is the default
        " position when opening a file.
        autocmd BufReadPost *
                    \ if line("'\"") > 1 && line("'\"") <= line("$") |
                    \   exe "normal! g`\"" |
                    \ endif

    augroup END
endif " has("autocmd")

" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------

set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set incsearch              " do incremental searching
set hlsearch
set laststatus=2           " always show the status line
set ignorecase             " ignore case when searching
set smartcase
set visualbell             " shut the fuck up


" ---------------------------------------------------------------------------
"  Strip all trailing whitespace in file
" ---------------------------------------------------------------------------

function! StripWhitespace ()
    exec ':%s/ \+$//gc'
endfunction
map ,s :call StripWhitespace ()<CR>

" ---------------------------------------------------------------------------
"  C settings
" ---------------------------------------------------------------------------

set cino+=(0

if !exists("autocommands_loaded")
    let autocommands_loaded = 1
    au BufNewFile *.h call s:InsertCHeader()
endif

function! s:InsertCHeader()
    let fname = '_' . expand('%:t')
    let fname = toupper(fname)
    let fname = substitute(fname, '\.', '_', 'g')
    call setline(line('.'), "#ifndef " . fname)
    call append(line('$'), "#define " . fname)
    call append(line('$'), "")
    call append(line('$'), "")
    call append(line('$'), "")
    call append(line('$'), "#endif")
    normal GGkk
endfunction

" ---------------------------------------------------------------------------
"  Plugins
" ---------------------------------------------------------------------------
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
